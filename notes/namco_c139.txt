Assault Schematic 5-18 / 5-19

SCIRQ "IRQ4"		C139 >> C148
!SCIACK				6B >> !BUSACK
!SCOM				20 @ PAL12L10 / 8D
!SCOMDT				21 @ PAL12L10 / 8D

A1:A13
D0:D12

SOUT				RINGOUT
SIN					RINGINA & RINGINK = RINGINA

C148 Pin 41 (!SRES) == RINGON, controls RINGSW

--
ridgera2	08			init at 1bdbc
raverace	08

fourtrax	09
suzuka8h	09
suzuk8h2	09
winrungp	09
winrun91	09
cybsled		09
cybrcomm	09	-- does this actually have multiplayer? wiki states it does not, but link options in service menu
acedrive	09
victlap		09
cybrcycc	09
adillor		09

driveyes	0d 09 0d

ridgeracf	0c

finallap	0d
finalap2	0d
finalap3	0d
tokyowar	0d
aircomb		0d
dirtdash	0d
alpiner2b	fd	-- not working right now


--

c139 @ namcos2		finallap, suzuka8h
	map(0x480000, 0x483fff).rw(m_sci, FUNC(namco_c139_device::ram_r), FUNC(namco_c139_device::ram_w));
	map(0x4a0000, 0x4a000f).m(m_sci, FUNC(namco_c139_device::regs_map));

c139 @ namcos21		winrungp, cybsled
	map(0xb00000, 0xb03fff).rw(m_sci, FUNC(namco_c139_device::ram_r), FUNC(namco_c139_device::ram_w));
	map(0xb80000, 0xb8000f).m(m_sci, FUNC(namco_c139_device::regs_map));

c139 @ namcos22		acedrive, victlap, cybrcomm
	map(0x20010000, 0x20013fff).m(m_sci, FUNC(namco_c139_device::data_map));
	map(0x20020000, 0x2002000f).m(m_sci, FUNC(namco_c139_device::regs_map));

c139 @ namcos22s	cybrcycc
	map(0x410000, 0x413fff).m(m_sci, FUNC(namco_c139_device::data_map));
	map(0x420000, 0x42000f).m(m_sci, FUNC(namco_c139_device::regs_map));


#define REG_0_STATUS (0x0 >>1)
0x01 : error?	(frame error)
0x02 : rxready?	(frame received)
0x04 : txready?	(needs to be high for games to boot at all)
0x08 : idle?

#define REG_1_MODE (0x2 >>1)

mode 08:
	reg1 = 8 (writes trigger tx?)
	reg2     = 1 > 3	(master = 1>3>1>3, 1 = tx disable, 3 = tx enable?)
	reg3 = 0
	reg5 = txsize (continous); raverace sets 00, needs 28 :(
	reg7 = 0; raverace sets 0x1000, needs 0;

mode 09:
	reg2 = 0?
	reg3 = 0?
	reg5 = 0?
	reg1 = 9* (writes trigger tx? check for 0x0100 blocks)
	// suzuka8h sets tx offset 0x1000 and writes to 0x1000
	// fourtrax sets tx offset 0x1000 and writes to 0x1000
	// adillor  sets tx offset 0x1000 and writes to 0x1000
	// cybrcycc sets tx offset 0x1000 but writes to 0x0000


mem 0024 = ?
mem 0041 = link count?


mode 0c:
	reg2     = 1 > 3	(master = 1>3>1>3..., slave = 0)
	reg3 & 1 = enable?
	reg5 = txsize // if 00 no tx
	reg7 = txoffset // *2

mode 0d:
	reg2 = 0?
	reg3 = 0/1 (0 = tx enable?, 1 = tx disable?)
	reg4 = rxwords
	reg5 = txwords // if 00 no tx (finallap = 0x14, finalap2 = 0x16, finalap3 = 0x16)
	finallap expects rxwords to be 0xEC before reading (008aec) -- 236
	finalap2/finalap3 expect rxwords to be 0xEA before reading (00cb3c / 00d6aa) -- 234
	reg7 = if 0x1000+ send from rx buffer

mode 0f:
	?? = finallap, finalap2, finalap3
	00 = aircomb, cybrcycc
		txoffset == 0x1000 -> error
	01 = tokyowar, driveyes, ridgeracf
		txoffset = 0x0000 -> 0x0000 = OK
	03 = fourtrax, suzuka8h, suzuk8h2, winrungp, winrun91, cybsled, cybrcomm, acedrive, victlap, adillor
		txoffset = 0x1000 -> 0x0800 = OK

	11 = ridgera2, raverace

mode fd:
	alpinr2a? - probably 0x0d

0x00 0000 - on init-1 (ridgera2)			-- ?
0x08 1000 - on init-3 (ridgera2)			--
0x09 1001 - on init-2 (suzuka8h, acedrive, winrungp)	-- auto send via bit
0x0C 1100 - on init-2 (ridgera2)			--
0x0D 1011 - on init-1 (finallap)  			-- auto send via reg
0x0F 1111 - on init-1 (suzuka8h, acedrive, winrungp, ridgera2)	-- reset?

#define REG_2_CONTROL (0x4 >>1)
0x01 : sync?
0x02 : tx sync?

0x0000 on init

#define REG_3_START (0x6 >>1)
0x01 : tx start/stop?
0x02 : ?
0x10 : ?


0x0011 on rr2/rave
0x0001 on fullscale
0x0000 on finallap
0x0003 on suzuka8h/acedrive

#define REG_4_RXWORDS (0x8 >>1)
0x0004 on init

#define REG_5_TXWORDS (0xA >>1)
0x0004 on init (s22)
0x0014 on init (s2)

#define REG_6_RXOFFSET (0xC >>1)
0x0000 on init

0x1000 on suzuka8h
0x0525 >> read 2a4a
0x1025 >> read 204a
0x104a >> read 2094

#define REG_7_TXOFFSET (0xE >>1)
0x0000 on init



-- final lap irq handler --
008a46++
  read rxoffset to D0
  read rxwords to D1

  if rxoffset and 0xF00 then
    clear rxoffset

  branch 008ade

008ade++
  0xff to D4
  compare D1 with 0xEC... (236)


--- ridgeracf ---
C139: reg_w[00] = 0000
C139: reg_w[01] = 000f
C139: reg_w[02] = 0000
C139: reg_w[03] = 0001		-- bit 1 = 0 ; txoffset = word?
C139: reg_w[04] = 0004
C139: reg_w[05] = 0004
C139: reg_w[06] = 0000
C139: reg_w[07] = 0000

--- ridgera2 ---
C139: reg_w[00] = 0000
C139: reg_w[01] = 000f
C139: reg_w[02] = 0000
C139: reg_w[03] = 0011		-- bit 1 = 0 ; txoffset = word?
C139: reg_w[04] = 0004
C139: reg_w[05] = 0004
C139: reg_w[06] = 0000
C139: reg_w[07] = 0000

--- raverace ---
C139: reg_w[00] = 0000
C139: reg_w[01] = 000f
C139: reg_w[02] = 0000
C139: reg_w[03] = 0011		-- bit 1 = 0 ; txoffset = word?
C139: reg_w[04] = 0004
C139: reg_w[05] = 0004
C139: reg_w[06] = 0000
C139: reg_w[07] = 0000


--- cybrcycc ---
..
C139: reg_w[00] = 0000
C139: reg_w[01] = 000f
C139: reg_w[02] = 0000
C139: reg_w[03] = 0000		-- all other mode-09 games do 0x0003 here - 
C139: reg_w[05] = 0000
C139: reg_w[04] = 0000
C139: reg_w[07] = 1000
C139: reg_w[06] = 1000

slot 1 @ 410000		410002 = id (0 - 3)
slot 2 @ 410200		410202 = id (0 - 3)

--- suzuka8h ---
..
C139: reg_w[00] = 0000
C139: reg_w[01] = 000f
C139: reg_w[02] = 0000
C139: reg_w[03] = 0003
C139: reg_w[04] = 0000
C139: reg_w[05] = 0000
C139: reg_w[06] = 1000
C139: reg_w[07] = 1000

slot 1 @ 411000*	+0x0100 per node id

--- fourtrax ---
..
C139: reg_w[00] = 0000
C139: reg_w[01] = 000f
C139: reg_w[02] = 0000
C139: reg_w[03] = 0003
C139: reg_w[04] = 0000
C139: reg_w[05] = 0000
C139: reg_w[06] = 1000
C139: reg_w[07] = 1000


--- acedrive ---
..
C139: reg_w[00] = 0000
C139: reg_w[01] = 000f
C139: reg_w[02] = 0000
C139: reg_w[03] = 0003
C139: reg_w[04] = 0000
C139: reg_w[05] = 0000
C139: reg_w[06] = 1000
C139: reg_w[07] = 1000

--- winrun91 ---
..
C139: reg_w[00] = 0000
C139: reg_w[01] = 000f
C139: reg_w[02] = 0000
C139: reg_w[03] = 0003
C139: reg_w[04] = 0000
C139: reg_w[05] = 0000
C139: reg_w[06] = 1000
C139: reg_w[07] = 1000

--- adillor ---
..
C139: reg_w[00] = 0000
C139: reg_w[01] = 000f
C139: reg_w[02] = 0000
C139: reg_w[03] = 0003
C139: reg_w[04] = 0000
C139: reg_w[05] = 0000
C139: reg_w[06] = 1000
C139: reg_w[07] = 1000


--- raverace ---
C139: reg_w[00] = 0000
C139: reg_w[01] = 000f
C139: reg_w[02] = 0000
C139: reg_w[03] = 0011
C139: reg_w[04] = 0004
C139: reg_w[05] = 0004
C139: reg_w[06] = 0000
C139: reg_w[07] = 0000

C139: reg_w[00] = 0000
C139: reg_w[01] = 000c
C139: reg_w[02] = 0000
C139: reg_w[03] = 0011
C139: reg_w[04] = 0000
C139: reg_w[05] = 0000
C139: reg_w[06] = 0000
C139: reg_w[07] = 1000



--- ridgeracf (center) ---
C139: reg_w[00] = 0000
C139: reg_w[01] = 000f
C139: reg_w[02] = 0000
C139: reg_w[03] = 0001
C139: reg_w[04] = 0004
C139: reg_w[05] = 0004
C139: reg_w[06] = 0000
C139: reg_w[07] = 0000

C139: reg_w[00] = 0000
C139: reg_w[01] = 000c
C139: reg_w[02] = 0000
C139: reg_w[03] = 0001
C139: reg_w[04] = 0000
C139: reg_w[05] = 0000
C139: reg_w[06] = 0000
C139: reg_w[07] = 1000

C139: reg_w[03] = 0001
-long pause-

C139: reg_r[05] = 0000
C139: reg_w[07] = 0000
C139: reg_w[02] = 0001
C139: reg_w[02] = 0003
C139: reg_w[03] = 0001
C139: reg_w[05] = 00f2
C139: reg_r[01] = 000c
C139: reg_w[01] = 000c
C139: reg_w[03] = 0000

C139: reg_r[05] = 00f2
(would read over and over again)

if reg5 != f2
	reg3 = 00	-- disable tx
	write data to memory
	reg3 = 01	-- enable tx
	reg5 = f2	-- set txwords
	reg1 = 0c	-- set mode


--- ridgeracf (slave) ---
C139: reg_w[00] = 0000
C139: reg_w[01] = 000f
C139: reg_w[02] = 0000
C139: reg_w[03] = 0001
C139: reg_w[04] = 0004
C139: reg_w[05] = 0004
C139: reg_w[06] = 0000
C139: reg_w[07] = 0000
-clear memory-

C139: reg_w[00] = 0000
C139: reg_w[01] = 000c
C139: reg_w[02] = 0000
C139: reg_w[03] = 0001
C139: reg_w[04] = 0000
C139: reg_w[05] = 0000
C139: reg_w[06] = 0000
C139: reg_w[07] = 1000

C139: reg_w[03] = 0001

C139: reg_w[01] = 000c
-over and over again-



--- finallap ---
C139: reg_r[00] = 0004
C139: reg_w[00] = 0000
C139: reg_r[03] = 0000
C139: reg_w[03] = 0000
C139: reg_r[00] = 0004
C139: reg_r[04] = 0000
C139: reg_r[05] = 0000
C139: reg_w[04] = 0000
C139: reg_w[05] = 0000
C139: reg_r[06] = 0000
C139: reg_r[07] = 0000
C139: reg_w[06] = 0000
C139: reg_w[07] = 0000
C139: reg_r[03] = 0000
C139: reg_w[03] = 0000
C139: reg_w[01] = 000d
-writing to memory-

C139: reg_r[00] = 0004 (loop until 0x04 is set)
C139: reg_r[07] = 0000
C139: reg_w[07] = 0000
C139: reg_w[05] = 0014


--- tokyowar ---
C139: reg_w[01] = 000f
C139: reg_w[02] = 0000
C139: reg_w[03] = 0001
C139: reg_w[04] = 00ff
C139: reg_w[05] = 0000
C139: reg_w[06] = 1000
C139: reg_w[07] = 0000




---- suzuka8h ----
102008	= linkcount 0+
480020	= linkcount 0+

wpset 480020,2,w